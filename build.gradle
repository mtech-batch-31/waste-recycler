plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'checkstyle'
}


group = 'com.mtech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.438'
    implementation 'com.github.derjust:spring-data-dynamodb:5.1.0'
    implementation 'org.springframework.data:spring-data-releasetrain:Neumann-SR9'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'io.awspring.cloud:spring-cloud-starter-aws-ses:2.4.4'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

bootJar {
    archiveFileName = "recycler.jar"
    archiveClassifier.set(null)
}


jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled true
    }

    afterEvaluate {
        excludedClassFilesForReport(classDirectories)
    }
}

private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                '**/entity/*.class',
                '**/model/**/*.class',
                '**/helper/*.class',
                '**/exception/*.class',
                '**/constant/*.class',
                '**/helper/DataSeeder*.class',
                '**/RecyclerApplication.class'
        ])
    }))
}


checkstyle {
    toolVersion = "10.10.0"
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true

    checkstyleMain {
        source ='src/main/java'
    }

    checkstyleTest {
        source ='src/test/java'
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}


sonarqube {
    // dependsOn check

    properties {
        property "sonar.projectKey", "mtech-batch-31_waste-recycler"
        property "sonar.organization", "mtech-batch-31"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

task installLocalGitHook(type: Copy){
    from new File(rootProject.rootDir, 'scripts/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks')}
    fileMode 0775
}

build {
    dependsOn installLocalGitHook
}
