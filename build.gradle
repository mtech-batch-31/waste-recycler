plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id 'org.sonarqube' version '3.5.0.2730'
    // id 'pmd'
//    id 'checkstyle'
//    id 'com.github.spotbugs' version '5.0.14'
}


group = 'com.mtech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.438'
    implementation 'com.github.derjust:spring-data-dynamodb:5.1.0'
    implementation 'org.springframework.data:spring-data-releasetrain:Neumann-SR9'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
//    finalizedBy jacocoTestReport, checkstyleTest, pmdTest, spotbugsTest // report is always generated after tests run
}

bootJar {
    archiveFileName = "recycler.jar"
    archiveClassifier.set(null)
}


jacocoTestReport {
    dependsOn test
    afterEvaluate {
        getClassDirectories().setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/entity/*',
                            '**/model/*',
                            '**/exception/*',
                            '**/constant/*',
                            '**/RecyclerApplication.java'
                    ])
                }))
    }

    reports {
        xml.enabled true
    }
}

//check {
//    dependsOn jacocoTestReport, checkstyleTest, pmdTest, spotbugsTest
//}


//checkstyle {
//    reports {
//        xml.required = false
//        html.required = true
//    }
//}

//checkstyle {
//    toolVersion = '8.37'
//    sourceSets = [it.sourceSets.main]
//
//    config = resources.text.fromString(getClass().getResourceAsStream('checkstyle.xml').text)
//    ignoreFailures = false
//    maxWarnings = 0
//    maxErrors = 0
//
//    configProperties.checkstyleSuppressionConfigDir = checkstyleSuppressionConfigDir
//}

sonarqube {
    // dependsOn check

    properties {
        property "sonar.projectKey", "mtech-batch-31_waste-recycler"
        property "sonar.organization", "mtech-batch-31"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

//tasks.withType(Checkstyle, jacocoTestReport, Pmd, spotbugs).configureEach {
//    reports {
//        xml.required = false
//        html.required = true
//    }
//}
