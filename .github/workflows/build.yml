name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPO_NAME: ${{ secrets.ECR_REPOSITORY_URL }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting.
          fetch-depth: 0

      # Triggering SonarQube analysis as results of it are required by Quality Gate check.
#      - name: SonarQube Scan
#        uses: sonarsource/sonarqube-scan-action@master
#        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"


  tests:
    needs: sonarqube
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      # checkout the codes
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available

      # cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      # Run all unit tests
      - name: Run unit tests
        run: ./gradlew test

#  sonar:
#    # run after gradle test
#    needs: tests
#    name: SonarCloud Analysis
#    runs-on: ubuntu-latest
#
#    steps:
#      # checkout the codes
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: 17
#          distribution: 'zulu' # Alternative distribution options are available
#
#      # cache sonarcloud packages
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#
#      # cache Gradle packages
#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle
#
#      - name: Build and analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew build sonar --info

  build_and_test:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check_and_build
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      # - run: ./gradlew check
      - run: ./gradlew bootJar

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            build/libs/recycler.jar
            build/reports

  build_and_push_image:
    needs: build_and_test
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.ECR_REPOSITORY_URL }}:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: build

      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}

      - name: Push to ECR
        run: docker push ${{ env.IMAGE_NAME }}
